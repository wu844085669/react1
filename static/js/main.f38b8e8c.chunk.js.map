{"version":3,"sources":["components/img/a1new.png","components/img/bazel-icon.svg","components/img/braintree.svg","components/img/dropbox.svg","components/img/google.svg","components/img/huawei.png","components/img/stripe.svg","components/img/twosigma.svg","components/img/pinterest.svg","components/img/heron.svg","components/img/impone.svg","components/banner/Banner.js","components/cont_one/Content_1.js","components/cont_two/Content_2.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Banner","props","state","className","src","require","alt","type","placeholder","Component","Content1","Content2","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f38b8e8c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/a1new.e4f280a2.png\";","module.exports = __webpack_public_path__ + \"static/media/bazel-icon.6408f615.svg\";","module.exports = __webpack_public_path__ + \"static/media/braintree.a386b6b7.svg\";","module.exports = __webpack_public_path__ + \"static/media/dropbox.5907247b.svg\";","module.exports = __webpack_public_path__ + \"static/media/google.643c4396.svg\";","module.exports = __webpack_public_path__ + \"static/media/huawei.bd368d04.png\";","module.exports = __webpack_public_path__ + \"static/media/stripe.979649f2.svg\";","module.exports = __webpack_public_path__ + \"static/media/twosigma.d2cac2ba.svg\";","module.exports = __webpack_public_path__ + \"static/media/pinterest.d7b33230.svg\";","module.exports = __webpack_public_path__ + \"static/media/heron.577f3aee.svg\";","module.exports = __webpack_public_path__ + \"static/media/impone.07ba81dc.svg\";","import React, { Component } from 'react';\r\nimport './banner.css'\r\nclass Banner extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  }\r\n    }\r\n    render() { \r\n        return ( \r\n            <div className=\"bander\">\r\n                <img src={require(\"../img/a1new.png\")} alt=\"\"/>\r\n                <div className=\"ulList\">\r\n                    <ul>\r\n                        <li>Going</li>\r\n                        <li>Downding</li>\r\n                        <li>Search</li>\r\n                        <li>Quit</li>\r\n                    </ul>\r\n                </div>\r\n                <div className =\"btnList\">\r\n                    <button>add</button>\r\n                    <button>delete</button>\r\n                    \r\n                </div>\r\n            <div className=\"search\">\r\n                <input type=\"text\" placeholder=\"search\"/>\r\n            </div>\r\n        </div>\r\n        \r\n         );\r\n    }\r\n}\r\n \r\nexport default Banner;","import React, { Component } from 'react';\r\nimport './content1.css'\r\nclass Content1 extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  }\r\n    }\r\n    render() { \r\n        return ( \r\n            <div className=\"content\">\r\n            <div className=\"conOne\">\r\n                <div className=\"left2\">\r\n                  <img src={require('../img/bazel-icon.svg')} alt=\"this is test\"/>\r\n                </div>\r\n                <div className=\"left\">\r\n                    <h1>Build and test software of any size, quickly and reliably</h1>\r\n                    <button>test1</button>\r\n                    <button>test2</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"contwo\">\r\n                <h1>Why Bazel?</h1>\r\n                <div className=\"bottom\">\r\n                    <div>\r\n                        <h1>Speed up your builds and tests</h1>\r\n                        <p>Bazel only rebuilds what is necessary. With advanced local and distributed caching, optimized dependency analysis and parallel execution, you get fast and incremental builds.</p>\r\n                    </div>\r\n                    <div>\r\n                        <h1>Speed up your builds and tests</h1>\r\n                        <p>Bazel only rebuilds what is necessary. With advanced local and distributed caching, optimized dependency analysis and parallel execution, you get fast and incremental builds.</p>\r\n                    </div>\r\n                    <div>\r\n                        <h1>Speed up your builds and tests</h1>\r\n                        <p>Bazel only rebuilds what is necessary. With advanced local and distributed caching, optimized dependency analysis and parallel execution, you get fast and incremental builds.</p>\r\n                    </div>\r\n                    <div>\r\n                        <h1>Speed up your builds and tests</h1>\r\n                        <p>Bazel only rebuilds what is necessary. With advanced local and distributed caching, optimized dependency analysis and parallel execution, you get fast and incremental builds.</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"hengxian\"></div>\r\n            <div className=\"conthree\">\r\n                <div className=\"img\">\r\n                    <h1>Trusted by industry leaders</h1>\r\n                   <div>\r\n                        <img src={require('../img/braintree.svg')} alt=\"this is a test\"/>\r\n                   </div>\r\n                   <div>\r\n                      <img src={require('../img/dropbox.svg')} alt=\"this is a test\"/>\r\n                    </div>\r\n                    <div>\r\n                        <img src={require('../img/google.svg')} alt=\"this is a test\"/>\r\n                     </div>\r\n                     <div>\r\n                            <img className=\"huawei\" src={require('../img/huawei.png')}  alt=\"this is a test\"/>\r\n                    </div>\r\n                    <div>\r\n                        <img src={require('../img/stripe.svg')} alt=\"this is a test\"/>\r\n                    </div>\r\n                    <div>\r\n                        <img src={require('../img/twosigma.svg')} alt=\"this is a test\"/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"content1\">\r\n                    <div>\r\n                        <h3>Bazel is the common build tool throughout Pinterest and has been instrumental in achieving fast, reproducible builds across our programming languages and platforms.</h3>\r\n                        <p>-- Rahul Malik, Software Engineer\r\n                        </p>\r\n                        <div className=\"box\">\r\n                            <img src={require('../img/pinterest.svg')}  alt=\"this a test\"/>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <h3>Bazel is the common build tool throughout Pinterest and has been instrumental in achieving fast, reproducible builds across our programming languages and platforms.</h3>\r\n                        <p>-- Rahul Malik, Software Engineer\r\n                        </p>\r\n                        <div className=\"box\">\r\n                            <img src={require('../img/heron.svg')}  alt=\"this a test\"/>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <h3>Bazel is the common build tool throughout Pinterest and has been instrumental in achieving fast, reproducible builds across our programming languages and platforms.</h3>\r\n                        <p>-- Rahul Malik, Software Engineer\r\n                        </p>\r\n                        <div className=\"box\">\r\n                            <img src={require('../img/impone.svg')}  alt=\"this a test\"/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"confour\">\r\n                <p>When you build software with Bazel, you're running the same code that has been refined and tested for years at Google to build heavy-duty, mission-critical infrastructure, services, and applications.</p>\r\n            </div>\r\n        </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Content1;","import React, { Component } from 'react';\r\nimport './content2.css'\r\nclass Content2 extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  }\r\n    }\r\n    render() { \r\n        return ( \r\n            <div className=\"content2\">\r\n                <table></table>\r\n                <div>\r\n           <table>\r\n               <thead>\r\n                   <tr>\r\n                       <td><a href=\"\">About</a></td>\r\n                       <td><a href=\"\">Support</a></td>\r\n                       <td><a href=\"\">Stay Connected</a></td>\r\n                   </tr>\r\n               </thead>\r\n               <tbody>\r\n                   <tr>\r\n                       <td>Who's Using Bazel?</td>\r\n                       <td>Roadmap</td>\r\n                       <td>Documentation</td>\r\n                   </tr>\r\n                   <tr>\r\n                       <td>Contribute</td>\r\n                       <td>Contribute</td>\r\n                       <td>Contribute</td>\r\n                   </tr>\r\n                   <tr>\r\n                    <td>Who's Using Bazel?</td>\r\n                    <td>Roadmap</td>\r\n                    <td>Documentation</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Contribute</td>\r\n                    <td>Contribute</td>\r\n                    <td>Contribute</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Who's Using Bazel?</td>\r\n                    <td>Roadmap</td>\r\n                    <td>Documentation</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Contribute</td>\r\n                    <td>Contribute</td>\r\n                    <td>Contribute</td>\r\n                </tr>\r\n               </tbody>\r\n               <tfoot>\r\n                   <tr>\r\n                       <td>© 2019 Google</td>\r\n                       <td></td>\r\n                       <td></td>\r\n                   </tr>\r\n               </tfoot>\r\n           </table>\r\n        </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Content2;","import React from 'react';\nimport './App.css';\nimport Banner from './components/banner/Banner'\nimport Content1 from './components/cont_one/Content_1'\nimport Content2 from './components/cont_two/Content_2'\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Banner/>\n        <table></table>\n        <Content1></Content1>\n        <Content2></Content2>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nimport * as serviceWorker from './serviceWorker';\n\n\n ReactDOM.render(<App/>, document.getElementById('root'));\n\n// store.subscribe(render)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}